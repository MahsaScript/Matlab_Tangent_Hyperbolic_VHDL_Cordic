-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\vhdl_approximate_tanh_design_fixpt_slcfg.vhd
-- Created: 2021-08-24 21:36:42
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: vhdl_approximate_tanh_design_fixpt_slcfg
-- Source Path: untitled/vhdl_approximate_tanh_design_fixpt_slcfg
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.untitled_pkg.ALL;

ENTITY vhdl_approximate_tanh_design_fixpt_slcfg IS
  PORT( x                                 :   IN    vector_of_std_logic_vector14(0 TO 125);  -- sfix14_En10 [126]
        y_out                             :   OUT   vector_of_std_logic_vector14(0 TO 125)  -- sfix14_En13 [126]
        );
END vhdl_approximate_tanh_design_fixpt_slcfg;


ARCHITECTURE rtl OF vhdl_approximate_tanh_design_fixpt_slcfg IS

  -- Constants
  CONSTANT nc                             : vector_of_signed14(0 TO 12) := 
    (to_signed(16#0C2F#, 14), to_signed(16#0F6D#, 14), to_signed(16#0FEC#, 14), to_signed(16#0FFD#, 14),
     to_signed(16#1000#, 14), to_signed(16#1000#, 14), to_signed(16#1000#, 14), to_signed(16#1000#, 14),
     to_signed(16#1000#, 14), to_signed(16#1000#, 14), to_signed(16#1000#, 14), to_signed(16#1000#, 14),
     to_signed(16#1000#, 14));  -- sfix14 [13]
  CONSTANT a                              : vector_of_signed14(0 TO 12) := 
    (to_signed(16#08CA#, 14), to_signed(16#0416#, 14), to_signed(16#0203#, 14), to_signed(16#0100#, 14),
     to_signed(16#0080#, 14), to_signed(16#0040#, 14), to_signed(16#0020#, 14), to_signed(16#0010#, 14),
     to_signed(16#0008#, 14), to_signed(16#0004#, 14), to_signed(16#0002#, 14), to_signed(16#0001#, 14),
     to_signed(16#0001#, 14));  -- sfix14 [13]

  -- Signals
  SIGNAL x_signed                         : vector_of_signed14(0 TO 125);  -- sfix14_En10 [126]
  SIGNAL y_out_tmp                        : vector_of_signed14(0 TO 125);  -- sfix14_En13 [126]

BEGIN
  outputgen1: FOR k1 IN 0 TO 125 GENERATE
    x_signed(k1) <= signed(x(k1));
  END GENERATE;

  vhdl_approximate_tanh_design_fixpt_slcfg_1_output : PROCESS (x_signed)
    VARIABLE t : vector_of_signed14(0 TO 125);
    VARIABLE y1 : signed(3 DOWNTO 0);
    VARIABLE q : signed(31 DOWNTO 0);
    VARIABLE c : signed(13 DOWNTO 0);
    VARIABLE c_0 : signed(13 DOWNTO 0);
    VARIABLE c_1 : signed(13 DOWNTO 0);
    VARIABLE c_2 : signed(13 DOWNTO 0);
    VARIABLE tmp : signed(13 DOWNTO 0);
    VARIABLE tmp_0 : signed(13 DOWNTO 0);
    VARIABLE tmp_1 : signed(13 DOWNTO 0);
    VARIABLE k : signed(15 DOWNTO 0);
    VARIABLE tmp_2 : signed(13 DOWNTO 0);
    VARIABLE c_3 : signed(13 DOWNTO 0);
    VARIABLE tmp_3 : signed(13 DOWNTO 0);
    VARIABLE tmp_4 : signed(13 DOWNTO 0);
    VARIABLE sub_cast : vector_of_signed14(0 TO 125);
    VARIABLE sub_cast_0 : vector_of_signed14(0 TO 125);
    VARIABLE add_temp : vector_of_signed16(0 TO 12);
    VARIABLE add_temp_0 : vector_of_signed16(0 TO 12);
    VARIABLE cast : vector_of_signed15(0 TO 125);
    VARIABLE cast_0 : vector_of_signed15(0 TO 125);
    VARIABLE add_cast : vector_of_signed14(0 TO 125);
    VARIABLE mul_temp : vector_of_signed28(0 TO 125);
    VARIABLE add_cast_0 : vector_of_signed14(0 TO 125);
    VARIABLE add_cast_1 : vector_of_signed14(0 TO 125);
    VARIABLE sub_cast_1 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_2 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_3 : vector_of_signed14(0 TO 125);
    VARIABLE mul_temp_0 : vector_of_signed28(0 TO 125);
    VARIABLE add_cast_4 : vector_of_signed14(0 TO 125);
    VARIABLE add_cast_5 : vector_of_signed14(0 TO 125);
    VARIABLE add_cast_6 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_7 : vector_of_signed14(0 TO 12);
    VARIABLE add_temp_1 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_2 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_3 : vector_of_signed14(0 TO 12);
    VARIABLE sub_temp : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_8 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_9 : vector_of_signed14(0 TO 12);
    VARIABLE add_temp_2 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_4 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_5 : vector_of_signed14(0 TO 12);
    VARIABLE sub_temp_0 : vector_of_signed14(0 TO 12);
    VARIABLE add_temp_3 : vector_of_signed16(0 TO 12);
    VARIABLE add_temp_4 : vector_of_signed16(0 TO 11);
    VARIABLE c_4 : vector_of_signed14(0 TO 11);
    VARIABLE add_temp_5 : vector_of_signed16(0 TO 11);
    VARIABLE c_5 : vector_of_signed14(0 TO 11);
    VARIABLE add_temp_6 : vector_of_signed16(0 TO 12);
    VARIABLE add_cast_10 : vector_of_signed14(0 TO 11);
    VARIABLE add_temp_7 : vector_of_signed16(0 TO 11);
    VARIABLE sra_temp : vector_of_signed14(0 TO 11);
    VARIABLE add_temp_8 : vector_of_signed14(0 TO 11);
    VARIABLE sub_cast_6 : vector_of_signed14(0 TO 11);
    VARIABLE add_temp_9 : vector_of_signed16(0 TO 11);
    VARIABLE sra_temp_0 : vector_of_signed14(0 TO 11);
    VARIABLE sub_temp_1 : vector_of_signed14(0 TO 11);
    VARIABLE sub_cast_7 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_11 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_12 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_13 : vector_of_signed14(0 TO 12);
    VARIABLE add_temp_10 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_8 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_9 : vector_of_signed14(0 TO 12);
    VARIABLE sub_temp_2 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_14 : vector_of_signed14(0 TO 12);
    VARIABLE add_cast_15 : vector_of_signed14(0 TO 12);
    VARIABLE add_temp_11 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_10 : vector_of_signed14(0 TO 12);
    VARIABLE sub_cast_11 : vector_of_signed14(0 TO 12);
    VARIABLE sub_temp_3 : vector_of_signed14(0 TO 12);
    VARIABLE mul_temp_1 : vector_of_signed48(0 TO 12);
    VARIABLE add_cast_16 : vector_of_signed16(0 TO 12);
  BEGIN
    c := to_signed(16#0000#, 14);
    c_0 := to_signed(16#0000#, 14);
    c_1 := to_signed(16#0000#, 14);
    c_2 := to_signed(16#0000#, 14);
    c_3 := to_signed(16#0000#, 14);
    tmp := to_signed(16#0000#, 14);
    tmp_0 := to_signed(16#0000#, 14);
    tmp_1 := to_signed(16#0000#, 14);
    k := to_signed(16#0000#, 16);
    tmp_2 := to_signed(16#0000#, 14);
    tmp_3 := to_signed(16#0000#, 14);
    tmp_4 := to_signed(16#0000#, 14);
    y1 := to_signed(16#0#, 4);
    q := to_signed(16#00000000#, 32);
    --HDL code generation from MATLAB function: sf_gateway_vhdl_approximate_tanh_design_fixpt_slcfg
    --MATLAB Function 'vhdl_approximate_tanh_design_fixpt_slcfg'
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --           Generated by MATLAB 9.8 and Fixed-Point Designer 7.0           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --   y_out = 1-(2./(power(2,((2.625)*x))+1));

    FOR i IN 0 TO 125 LOOP
      y1 := x_signed(i)(13 DOWNTO 10);
      q := resize(y1, 32);
      sub_cast(i) := x_signed(i)(12 DOWNTO 0) & '0';
      sub_cast_0(i) := y1(2 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      tmp := sub_cast(i) - sub_cast_0(i);
      tmp_0 := to_signed(16#0000#, 14);
      tmp_1 := to_signed(16#1000#, 14);
      k := to_signed(16#0004#, 16);

      FOR n IN 0 TO 12 LOOP
        add_temp(n) := to_signed(n + 1, 16);
        c := SHIFT_RIGHT(tmp_1, to_integer(add_temp(n)));
        add_temp_0(n) := to_signed(n + 1, 16);
        c_0 := SHIFT_RIGHT(tmp_0, to_integer(add_temp_0(n)));
        IF tmp < to_signed(16#0000#, 14) THEN 
          add_cast_2(n) := (resize(a((n + 1) - 1)(13 DOWNTO 1), 14)) + ('0' & a((n + 1) - 1)(0));
          tmp := tmp + add_cast_2(n);
          sub_cast_2(n) := (resize(tmp_0(13 DOWNTO 1), 14)) + ('0' & tmp_0(0));
          sub_cast_3(n) := (resize(c(13 DOWNTO 1), 14)) + ('0' & c(0));
          sub_temp(n) := sub_cast_2(n) - sub_cast_3(n);
          tmp_0 := sub_temp(n)(12 DOWNTO 0) & '0';
          sub_cast_4(n) := (resize(tmp_1(13 DOWNTO 1), 14)) + ('0' & tmp_1(0));
          sub_cast_5(n) := (resize(c_0(13 DOWNTO 1), 14)) + ('0' & c_0(0));
          sub_temp_0(n) := sub_cast_4(n) - sub_cast_5(n);
          tmp_1 := sub_temp_0(n)(12 DOWNTO 0) & '0';
        ELSE 
          sub_cast_1(n) := (resize(a((n + 1) - 1)(13 DOWNTO 1), 14)) + ('0' & a((n + 1) - 1)(0));
          tmp := tmp - sub_cast_1(n);
          add_cast_6(n) := (resize(tmp_0(13 DOWNTO 1), 14)) + ('0' & tmp_0(0));
          add_cast_7(n) := (resize(c(13 DOWNTO 1), 14)) + ('0' & c(0));
          add_temp_1(n) := add_cast_6(n) + add_cast_7(n);
          tmp_0 := add_temp_1(n)(12 DOWNTO 0) & '0';
          add_cast_8(n) := (resize(tmp_1(13 DOWNTO 1), 14)) + ('0' & tmp_1(0));
          add_cast_9(n) := (resize(c_0(13 DOWNTO 1), 14)) + ('0' & c_0(0));
          add_temp_2(n) := add_cast_8(n) + add_cast_9(n);
          tmp_1 := add_temp_2(n)(12 DOWNTO 0) & '0';
        END IF;
        IF to_signed(n + 1, 16) = k THEN 
          add_temp_3(n) := to_signed(n + 1, 16);
          c_1 := SHIFT_RIGHT(tmp_1, to_integer(add_temp_3(n)));
          add_temp_6(n) := to_signed(n + 1, 16);
          c_2 := SHIFT_RIGHT(tmp_0, to_integer(add_temp_6(n)));
          IF tmp < to_signed(16#0000#, 14) THEN 
            add_cast_11(n) := (resize(a((n + 1) - 1)(13 DOWNTO 1), 14)) + ('0' & a((n + 1) - 1)(0));
            tmp := tmp + add_cast_11(n);
            sub_cast_8(n) := (resize(tmp_0(13 DOWNTO 1), 14)) + ('0' & tmp_0(0));
            sub_cast_9(n) := (resize(c_1(13 DOWNTO 1), 14)) + ('0' & c_1(0));
            sub_temp_2(n) := sub_cast_8(n) - sub_cast_9(n);
            tmp_0 := sub_temp_2(n)(12 DOWNTO 0) & '0';
            sub_cast_10(n) := (resize(tmp_1(13 DOWNTO 1), 14)) + ('0' & tmp_1(0));
            sub_cast_11(n) := (resize(c_2(13 DOWNTO 1), 14)) + ('0' & c_2(0));
            sub_temp_3(n) := sub_cast_10(n) - sub_cast_11(n);
            tmp_1 := sub_temp_3(n)(12 DOWNTO 0) & '0';
          ELSE 
            sub_cast_7(n) := (resize(a((n + 1) - 1)(13 DOWNTO 1), 14)) + ('0' & a((n + 1) - 1)(0));
            tmp := tmp - sub_cast_7(n);
            add_cast_12(n) := (resize(tmp_0(13 DOWNTO 1), 14)) + ('0' & tmp_0(0));
            add_cast_13(n) := (resize(c_1(13 DOWNTO 1), 14)) + ('0' & c_1(0));
            add_temp_10(n) := add_cast_12(n) + add_cast_13(n);
            tmp_0 := add_temp_10(n)(12 DOWNTO 0) & '0';
            add_cast_14(n) := (resize(tmp_1(13 DOWNTO 1), 14)) + ('0' & tmp_1(0));
            add_cast_15(n) := (resize(c_2(13 DOWNTO 1), 14)) + ('0' & c_2(0));
            add_temp_11(n) := add_cast_14(n) + add_cast_15(n);
            tmp_1 := add_temp_11(n)(12 DOWNTO 0) & '0';
          END IF;
          mul_temp_1(n) := to_signed(16#00000003#, 32) * k;
          add_cast_16(n) := mul_temp_1(n)(15 DOWNTO 0);
          k := add_cast_16(n) + 1;
        END IF;
      END LOOP;

      IF q = to_signed(16#00000000#, 32) THEN 
        tmp_2 := to_signed(16#0000#, 14);
      ELSIF q > to_signed(16#00000000#, 32) THEN 
        tmp_2 := nc(to_integer(q - 1));
      ELSE 
        cast(i) := resize(nc(to_integer(resize( - (resize(q, 33)), 32) - 1)), 15);
        cast_0(i) :=  - (cast(i));
        tmp_2 := cast_0(i)(13 DOWNTO 0);
      END IF;
      add_cast(i) := (resize(tmp_1(13 DOWNTO 1), 14)) + ('0' & tmp_1(0));
      mul_temp(i) := tmp_2 * tmp_0;
      add_cast_0(i) := mul_temp(i)(25 DOWNTO 12) + ('0' & mul_temp(i)(11));
      add_cast_1(i) := (resize(add_cast_0(i)(13 DOWNTO 1), 14)) + ('0' & add_cast_0(i)(0));
      c_3 := add_cast(i) + add_cast_1(i);
      add_cast_3(i) := (resize(tmp_0(13 DOWNTO 1), 14)) + ('0' & tmp_0(0));
      mul_temp_0(i) := tmp_2 * tmp_1;
      add_cast_4(i) := mul_temp_0(i)(25 DOWNTO 12) + ('0' & mul_temp_0(i)(11));
      add_cast_5(i) := (resize(add_cast_4(i)(13 DOWNTO 1), 14)) + ('0' & add_cast_4(i)(0));
      tmp_3 := add_cast_3(i) + add_cast_5(i);
      tmp_4 := to_signed(16#0000#, 14);

      FOR n_0 IN 0 TO 11 LOOP
        IF tmp_3 < to_signed(16#0000#, 14) THEN 
          add_temp_5(n_0) := to_signed(n_0 + 1, 16);
          c_5(n_0) := SHIFT_RIGHT(c_3, to_integer(add_temp_5(n_0)));
          tmp_3 := tmp_3 + c_5(n_0);
          sub_cast_6(n_0) := (resize(tmp_4(13 DOWNTO 1), 14)) + ('0' & tmp_4(0));
          add_temp_9(n_0) := to_signed(n_0 + 1, 16);
          sra_temp_0(n_0) := SHIFT_RIGHT(to_signed(16#0800#, 14), to_integer(add_temp_9(n_0)));
          sub_temp_1(n_0) := sub_cast_6(n_0) - sra_temp_0(n_0);
          tmp_4 := sub_temp_1(n_0)(12 DOWNTO 0) & '0';
        ELSE 
          add_temp_4(n_0) := to_signed(n_0 + 1, 16);
          c_4(n_0) := SHIFT_RIGHT(c_3, to_integer(add_temp_4(n_0)));
          tmp_3 := tmp_3 - c_4(n_0);
          add_cast_10(n_0) := (resize(tmp_4(13 DOWNTO 1), 14)) + ('0' & tmp_4(0));
          add_temp_7(n_0) := to_signed(n_0 + 1, 16);
          sra_temp(n_0) := SHIFT_RIGHT(to_signed(16#0800#, 14), to_integer(add_temp_7(n_0)));
          add_temp_8(n_0) := add_cast_10(n_0) + sra_temp(n_0);
          tmp_4 := add_temp_8(n_0)(12 DOWNTO 0) & '0';
        END IF;
      END LOOP;

      t(i) := tmp_4;
      y_out_tmp(i) <= t(i)(12 DOWNTO 0) & '0';
    END LOOP;

  END PROCESS vhdl_approximate_tanh_design_fixpt_slcfg_1_output;


  outputgen: FOR k1 IN 0 TO 125 GENERATE
    y_out(k1) <= std_logic_vector(y_out_tmp(k1));
  END GENERATE;

END rtl;

